import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { fileURLToPath } from 'url';

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ __dirname –≤ ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rootDir = path.resolve(__dirname, '../public/img/systems');
const maxWidth = 2000;
const quality = 90;

const isImage = (filename: string) =>
    ['.jpg', '.jpeg', '.png'].includes(path.extname(filename).toLowerCase());

async function optimizeImage(inputPath: string) {
    const { dir, name } = path.parse(inputPath);
    const outputPath = path.join(dir, `${name}.webp`);

    try {
        await sharp(inputPath).resize({ width: maxWidth }).webp({ quality }).toFile(outputPath);

        fs.unlinkSync(inputPath);
        console.log(`‚úÖ ${inputPath} ‚Üí ${outputPath} (–æ—Ä–∏–≥–∏–Ω–∞–ª —É–¥–∞–ª–µ–Ω)`);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${inputPath}:`, err);
    }
}

async function walkAndOptimize(dir: string) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);

        if (entry.isDirectory()) {
            await walkAndOptimize(fullPath); // —Ä–µ–∫—É—Ä—Å–∏—è
        } else if (entry.isFile() && isImage(entry.name)) {
            await optimizeImage(fullPath);
        }
    }
}

async function start() {
    console.log(`üìÇ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–ø–∫–∏: ${rootDir}`);
    await walkAndOptimize(rootDir);
    console.log('‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
}

start();
